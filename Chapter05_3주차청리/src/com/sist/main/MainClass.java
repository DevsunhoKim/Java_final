package com.sist.main;
/*
 *  1. 객체지향 프로그램
 *  --------------
 *    클래스 => 만드는 목적
 *      1) 재사용이 가능
 *         = 상속 => 기존의 클래스를 변경해서 사용할 목적
 *         	class GenieMusic
 *          => class Melon extends GeneMusic
 *                         -------  기존의 클래스를 확장
 *         = 포함 => 기존의 클래스를 그래도 사용
 *             class Melon
 *             {
 *             	GeneMusic gm=new GenieMusic();
 *             }
 *       2) 필요한 데이터를 보호 : 캡슐화
 *          => 접근지정어 : private => 클래스에서 사용하는 멤버변수는
 *          			은닉화 => 메소드에서 기능을 제작
 *                              --------------
 *                                읽기 (getter) / 쓰기 (setter)
 *       3) 수정이 가능 / 추가 가능 => 다형성
 *          -------   ------
 *           오버라이딩   오버로딩
 *      -------------------------------------------------------------
 *      
 *      목적 => 유지보수가 용이하게 만든다 => 가독성 (리펙토링)
 *            개발 => 개발 / 유지보수
 *                  (1년)  (10~15년)
 *    
 *    2. 클래스를 만드는 과정
 *     1) 클래스 구성요소
 *     	  class MainClass 
 *     		{
 *     			-----------------
 *     			 변수 => 1개의 데이터를 저장
 *     			 인스턴스 변수 
 *     				=> 여러개를 따로 저장해서 사용이 가능
 *     			       ------- new => 중심
 *     			 공유 변수 ,클래스 변수 : static => 컴파일러에 의해 자동으로 생성
 *     							   메모리 생성 => 1개만 생성
 *     							   => 데이터 목록
 *     			 예)
 *     				String name; => 자동 초기화 : class 인경우 : null
 *     				null => 클래스의 객체는 반드시 메모리 주소(주소가 지정이 안된 경우)
 *     				A a=null (a=null)
 *     				a=new A(); => ***NullPointerException 
 *     				int age; =0
 *     				String address; = null
 *     				String phone; = null
 *     				double ki; = 0.0
 *     				char c; ='\0'
 *     				boolean b; = false ==> 한 번을 메모리에 저장
 *                                => 필요한 값으로 변경해서 사용
 *                                   ------------------
 *                                   (생성자 / 초기화 블록 필요)
 *                  ==> 권장
 *                  String name,address,phone ... ==> 한 줄에 한 변수씩 선언
 *       ***** 데이터(변수)는 반드시 외부에서 접근 , 변경 , 손실 => 은닉화
 *       	   private ==> 모든 변수는 private를 사용
 *     			-----------------
 *     			생성자 => 접근이 가능 => public 
 *                => 무조건 생성하는 것이 아니다 (생성자가 없는 경우에는 컴파일러가 자동으로 생성)
 *                                                      ---------------
 *                                                          |
 *                                                매개변수가 없는 생성자 (디폴트 생성자)
 *                클래스에는 반드시 생성자가 있어야함
 *                
 *                class A
 *                {
 *                	=> 자동 생성 => A(){}
 *                }
 *                class A
 *                {
 *                 A(int a){} => 생성자가 존재 => 자동추가 안된다
 *                }
 *                
 *                *** 컴파일러가 자동 생성 하는 부분
 *                1) import : import java.lang.*;
 *                            -------------------
 *                                     |
 *                               String , System , Math
 *                2) void method()
 *                		{
 *                		 return; => 생략하는 경우 => 자동으로 추가
 *                		}
 *                3) 자바의 모든 클래스는 Object 클래스 상속
 *                                 --------------
 *                 class A extends Object
 *                         --------------> Object에서 지원하는 모든 메소드
 *                4) 생성자가 없는 경우 => 자동으로 디폴트 생성자 추가
 *                5) 자바의 모든 클래스는 예외처리를 가지고 있다
 *                                 ------
 *                                   |
 *                              컴파일시 / 런타임시
 *                              javac   java
 *                			
 *                -----------------------
 *            1) 역할
 *                = 멤버 변수에 대한 초기화
 *                = 메모리에 저장시 반드시 호출되는 메소드
 *                  => 생성자 호출시 new 생성자()
 *                              ----------
 *                  => 모든 클래스는 생성자가 1개 이상 존재 (없는 경우에는 자동 추가)
 *            2) 특징
 *                = 클래스명과 동일
 *                = 리턴형이 없다 (******* void는 리턴형이다)
 *                	class A => int A() , void A() => 일반 메소드
 *                = 생성자는 다른 클래스에서 메모리 할당후에 사용
 *                 => 기본 public
 *                = 필요시 여러개의 생성자를 만들수 있다
 *                  => 같은 이름으로 여러개를 만들어서 다른 기능 수행 
 *                     ------    ---------
 *                            |
 *                          오버로딩 (중복함수정의)
 *                          -------
 *                         1) 조건
 *                           =메소드명이 동일
 *                           =매개변수의 갯수나 데이터형이 다르다
 *                           =리턴형은 관계없다
 *                            int aaa() ===> aaa()
 *                            void aaa() ==> aaa()
 *                            void aaa(int a) ====> aaa(int)
 *                            void aaa(int b) ====> aaa(int)
 *                           = 같은 클래스에서 제작
 *                           = 생성자 , 멤버 메소드에서도 적용
 *                             ---- pritnln(),println(String s) ...
 *                             ---- substring(int s), sunstring(int a, int e)
 *             3) 사용처
 *               = 인스턴스 변수가 명시적 초기화가 안되는 경우
 *                           --------- 파일 읽기 , DB , 크롤링
 *               = 시작과 동시에 처리하는 명령문
 *                예) 자동 로그인 , ID등록 , 윈도우 화면 디자인
 *                  서버 => 서버가 동작 , 클라이언트 => 데이터베이스 연결
 *                => A a=new A();
 *                	 A.메소드명()
 *                   A a;
 *                   a.메소드명() ==> Error
 *               =  
 *                           
 *     
 *     			초기화 블록 : 생성자 없이 멤버변수 ㅊ기화
 *              --------- 컴파일러에 의해 자동 호출
 *                 인스턴스 블록 => 생성자를 주로 사용
 *                  class A
 *                  {
 *                  	int a; => 0
 *                  	
 *                       {
 *                         a=(int)(Math.random()*100)+1;
 *                       }
 *                  }
 *                 
 *                  A()
 *                  {
 *                  	a=(int)(Math.random()*100)+1;
 *                  }
 *                  
 *                  static 블록 => 자동으로 메모리 할당 => 생성자를 사용하지 않아도 된다
 *                  class A
 *                  {
 *                  	static int a; // 생성자 호출 없이도 사용이 가능
 *                  }
 *                  A aa=new A(); ==> aa.a
 *                  A.a
 *     				
 *     				*** 주의점
 *     				인스턴스 블록 / static 블록
 *     				class A
 *     				{
 *     					int a;
 *     					static int b;
 *     				  --------------------------(O)
 *                      {
 *                      	a=100;
 *                      	b=200;
 *                      }
 *                    -------------------------- (X) => static 에서는 인스턴스 사용불가
 *                      static
 *                      {
 *                      	=> 객체 생성후에 사용
 *                          a=1000; ===>Error
 *                      	b=2000; => static 인경우 사용이 가능
 *                      }
 *                   --------------------------------
 *                   초기값에 대한 호출 순서
 *                   1) 명시적인 초기화
 *                   	int a=10;
 *                   2) 초기화 블록
 *                   	a=100;
 *                   3) 생성자
 *                   	a=200;
 *                   ***** 변수
 *                   멤버변수 / static변수 / 지역변수
 *                   ------------------------
 *                     | 반드시 초기화를 해서 사용
 *                     
 *     			-----------------
 *     			메소드 => 다른 클래스와 통신  => public
 *     			        ------------
 *               형식) 
 *                  멤버메소드
 *                  public 리턴형 메소드명 (매개변수목록) => 선언부
 *                  {
 *                  	구현부
 *                  	=> static 변수나 static 메소드 사용이 가능
 *                  }
 *                   => 호출 객체명.메소드()
 *                   	Scanner scan=new Scanner(System.in)
 *                   	scan.nextInt()
 *                   -------------------------------------
 *                  static메소드
 *                  public static 리턴형 메소드명(매개변수목록) => 선언부
 *                  {
 *                  	구현부
 *                  	=> static 변수나 static 메소드만 사용이 가능
 *                  }
 *                   = 호출 => 클래스명.메소드()
 *                   	Math.random()
 *     				
 *     				String s="";
 *     				s.sunstring()
 *     				s.trim()
 *     				s.replace()
 *                  ----------------------- 멤버 메소드
 *                  
 *                  String.valueOf() --- static 메소드
 *                  
 *                  Calendar c=Calendar.getInstance()
 *                  --------   ---------------------- new가 없으면 추상클래스
 *                  추상 클래스
 *                  
 *     
 *     
 *     -----------------
 *     	
 *     		}
 *     	*** 코드영역
 *      class 
 *      {
 *      	선언만 가능 : 변수 선언, 메소드 선언
 *      			=> 메소드 호출 , 연산자 처리 , 제어문 사용 (X)=> 구현 안됨
 *      }
 *      method
 *      {
 *      	선언(지역변수) , 메소드 호출 , 연산처리 , 제어문 => 구현
 *      	
 *      	사용자 요청 => 처리 => 결과값 전송
 *      }
 *      메소드 => 생성자 , 초기화블록 (구현)
 *      *** 사용자 정의로 만든 메소드,생성자
 *          => 반드시 호출해서 사용 (자동 호출이 없음)
 *          => 초기화 블록 => 컴파일러에 의해 한 번만 수행
 *      ==> CRUD
 *      	회원가입  / 회원 정보 / 정보 수정 / 회원탈퇴
 *     2) 메모리 저장
 *     3) 활용 (호출)
 *    
 *    3. 클래스의 종류
 *       1) 일반 클래스 
 *       2) 추상 클래스
 *       3) 인터페이스
 *       4) 내부 클래스
 *          = 멤버 클래스 , 지역 클래스 , 익명의 클래스
 *          
 *          class A
 *          {
 *          	class B
 *              {
 *              }
 *          }
 *          
 *          class A
 *          { 
 *          	public void disp()
 *          	{
 *          		class B
 *           		{
 *           		}
 *              }
 *          }
 *          ====> 상속없이 오버라이딩
 *          class A
 *          {
 *            B b=new B(){
 *             => 메소드 추가
 *             => 메소드 변경
 *             }
 *          }
 *        5) 종단 클래스 : 상속을 할 수 없는 클래스
 *        		final class => Stirng, Math , System
 *             
 *             
 *       5) 종단 클래스
 *       
 *    4. 비정상 종료를 방지하는 프로그램 구현 => 예외처리
 *    ---------------------------------------------------- 자바 기초
 *      	  
 */
public class MainClass {
	int a=100;
	static int b=200;
	public static void aaa()
	{
		MainClass m=new MainClass();
		System.out.println(m.a);
		System.out.println(b);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
